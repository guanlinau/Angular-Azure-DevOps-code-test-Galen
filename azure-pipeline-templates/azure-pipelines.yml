# trigger:
# - master
# trigger: none
trigger:
    - Augular-DevOps-YAML-pipleine-Galen

resources:
    - repo: self

variables:
    dockerRegistryServiceConnection: "5e1f01e6-4395-4c31-8174-dd4474fc2ca1"
    imageRepository: "angularrepo"
    containerRegistry: "angularwebacr.azurecr.io"
    dockerfilePath: "$(Build.SourcesDirectory)/Dockerfile"
    tag: "$(Build.BuildId)"
    imageSecret: "image-key"
    uatNamespace: "angular-web-uat"
    proNamespace: "angular-web-pro"
    uatReplicasNumber: 1
    proReplicasNumber: 2
    uatEnvironment: "uat.angular-web-uat"
    proEnvironment: "pro.angular-web-pro"
    deployToUatStage: "Deploy_to_UAT"
    deployToProStage: "Deploy_to_Pro"
    vmImageName: "ubuntu-latest"

stages:
    - stage: Build
      displayName: Build and push stage
      jobs:
          - job: Build
            displayName: Build
            pool:
                vmImage: $(vmImageName)
            steps:
                - task: Docker@2
                  displayName: Build and push an image to container registry
                  inputs:
                      command: buildAndPush
                      repository: $(imageRepository)
                      dockerfile: $(dockerfilePath)
                      containerRegistry: $(dockerRegistryServiceConnection)
                      tags: |
                          - $(tag)

                - task: PublishPipelineArtifact@1
                  displayName: Publish the manifests folder to pipeline
                  inputs:
                      targetPath: "$(Build.SourcesDirectory)/manifests"
                      artifact: "manifests"
                      publishLocation: "pipeline"

    - template: azure-pipeline-templates/deploy-template.yml
      parameters:
          stageName: $(deployToUatStage)
          imagePullSecret: $(imageSecret)
          angular_web_env: $(uatNamespace)
          replica_number: $(uatReplicasNumber)
          acr_server: $(containerRegistry)
          acr_repo_name: $(imageRepository)
          image_version: $(tag)
          vmImage: $(vmImageName)
          environment: $(uatEnvironment)
          dockerRegistryEndpoint: $(dockerRegistryServiceConnection)
