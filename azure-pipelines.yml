# trigger:
# - master
trigger: none
# trigger: 
#     - code_vulnerabilities
    
resources:
    - repo: self

variables:
    # Container registry service connection established during pipeline creation
    CI: true
    dockerRegistryServiceConnection: "453a3951-5cbc-4f12-9589-8ad8592ee4dd"
    imageRepository: "angularwebdevops"
    containerRegistry: "angularwebacr.azurecr.io"
    dockerfilePath: "$(Build.SourcesDirectory)/Dockerfile"
    tag: "$(Build.BuildId)"
    imageSecret: "image-key"
    uatNamespace: "angular-web-uat"
    proNamespace: "angular-web-pro"
    uatReplicasNumber: 1
    proReplicasNumber: 2
    uatEnvironment: "uat.angular-web-uat"
    proEnvironment: "pro.angular-web-pro"
    vmImageName: "ubuntu-latest"
    azureSubscriptionEndpoint: "e2e_azureSubscriptionEndpoint"
    resourcesGroupName: "angular-web-sg"
    aksClusterName: "angular-web-aks"
    clusterServiceName: "angular-web-service"
    sonarOrganization: 'guanlinau'
    sonarCliProjectKey: 'guanlinau_Angular-Azure-DevOps-code-test-Galen'
    sonarCliProjectName: 'Angular-Azure-DevOps-code-test-Galen'
    sonarCliSources: '.'



stages:
    - stage: TestAndCodeAnalysis
      displayName: "Test&Code Analysis"
      jobs:
          - job: Compile_Test_Code_Analysis
            displayName: "Compile_Test_Code_Analysis"
            pool:
                vmImage: $(vmImageName)
            
            # Our angular project uses Node.js v14.21.3
            steps:
                - task: NodeTool@0
                  inputs:
                      versionSource: "spec"
                      versionSpec: "14.x"
                  displayName: "Install Node.js"
                - task: Npm@1
                  inputs:
                      command: "install"
                  displayName: "Install dependencies"
                
                #  Build and compile the Angular project
                - task: Npm@1
                  inputs:
                      command: "custom"
                      customCommand: "run build"
                  displayName: "Run build for compiling"
                
                # Run unit tests and test coverage
                - script: |
                      npx ng test --code-coverage --watch=false
                  displayName: "Run unit tesing and access the code coverage"
                
                # Accessing the code coverage
                - task: PublishCodeCoverageResults@1
                  displayName: "Access and Publish code coverage results"
                  condition: succeededOrFailed()
                  inputs:
                      codeCoverageTool: "Cobertura"
                      summaryFileLocation: "coverage/angular11-testing-examples/cobertura-coverage.xml"
                      reportDirectory: "coverage/angular11-testing-examples/"
                      failIfCoverageEmpty: false
                
                # Accessing the unit testing results report
                - task: PublishTestResults@2
                  displayName: "Access and Publish unit test results"
                  condition: succeededOrFailed()
                  inputs:
                      searchFolder: $(System.DefaultWorkingDirectory)
                      testRunTitle: Angular
                      testResultsFormat: JUnit
                      testResultsFiles: "src/test-results/Chrome_Headless_117.0.5938.132_(Linux_x86_64)/TESTS-results.xml"
                - script: |
                      ls -al src/results


                # Linting and code analysis
                - task: Npm@1
                  inputs:
                      command: "custom"
                      customCommand: "run lint"
                  displayName: "Run Linting and code quality analysis"
          - job: Scan_Code_Vulnerabilities
            dependsOn: Compile_Test_Code_Analysis
            displayName: "Scan_Code_Vulnerabilities_SonarCloud"
            pool:
                vmImage: $(vmImageName)
            
            # Using SonarCloud for static application security testing
            steps:
                - task: SonarCloudPrepare@1
                  inputs:
                    SonarCloud: 'sonarcloud'
                    organization: $(sonarOrganization)
                    scannerMode: 'CLI'
                    configMode: 'manual'
                    cliProjectKey: $(sonarCliProjectKey)
                    cliProjectName: $(sonarCliProjectName)
                    cliSources: $(sonarCliSources)
                - task: SonarCloudAnalyze@1
                  displayName: 'Run Code Analysis'
                  inputs:
                    jdkversion: 'JAVA_HOME'
                - task: SonarCloudPublish@1
                  inputs:
                    pollingTimeoutSec: '300'
    
    # This stage is to Build Docker image, versioning artifacts and push images/artifacts into Azure Container Registry
    # This stage will be triggered on master branch only
    - stage: Build
      displayName: Build and push Docker image stage
      #   condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
      jobs:
          - job: Build
            displayName: Build
            pool:
                vmImage: $(vmImageName)

            steps:
                - task: Docker@2
                  displayName: Build and push an image to container registry
                  inputs:
                      command: buildAndPush
                      repository: $(imageRepository)
                      dockerfile: $(dockerfilePath)
                      containerRegistry: $(dockerRegistryServiceConnection)
                      tags: |
                          $(tag)

                - task: PublishPipelineArtifact@1
                  displayName: Publish the manifests folder to pipeline
                  inputs:
                      targetPath: "$(Build.SourcesDirectory)/manifests"
                      artifact: "manifests"
                      publishLocation: "pipeline"
    
    #  This stage is to deploy angular web into Uat env for User Acceptance Testing also as a deployed env for e2e 
    #  This stage will be triggered on master branch only
    - stage: Deploy_to_UAT
      displayName: Deploy to UAT stage
      #   condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
      dependsOn: Build
      variables:
          imagePullSecret: $(imageSecret)
          angular-web-env: $(uatNamespace)
          replica-number: $(uatReplicasNumber)
          acr-server: $(containerRegistry)
          acr-repo-name: $(imageRepository)
          image-version: $(tag)
      jobs:
          - deployment: Deploy_to_UAT
            displayName: Deploy to UAT envrionment
            pool:
                vmImage: $(vmImageName)
            environment: $(uatEnvironment)
            strategy:
                runOnce:
                    deploy:
                        steps:
                            - task: DownloadPipelineArtifact@2
                              inputs:
                                  artifactName: "manifests"
                                  downloadPath: "$(System.ArtifactsDirectory)/manifests"

                            - task: KubernetesManifest@0
                              displayName: Create imagePullSecret
                              inputs:
                                  action: createSecret
                                  secretName: $(imagePullSecret)
                                  namespace: $(uatNamespace)
                                  dockerRegistryEndpoint: $(dockerRegistryServiceConnection)

                            - task: replacetokens@5
                              inputs:
                                  rootDirectory: "$(System.ArtifactsDirectory)/manifests"
                                  targetFiles: "kubernetes.yaml"
                                  encoding: "auto"
                                  tokenPattern: "custom"
                                  tokenPrefix: "$"
                                  tokenSuffix: "$"
                                  writeBOM: true
                                  actionOnMissing: "warn"
                                  keepToken: false
                                  actionOnNoFiles: "continue"
                                  enableTransforms: false
                                  enableRecursion: false
                                  useLegacyPattern: false
                                  enableTelemetry: true

                            - task: KubernetesManifest@0
                              displayName: Deploy to Kubernetes cluster
                              inputs:
                                  action: deploy
                                  namespace: $(uatNamespace)
                                  manifests: |
                                      $(System.ArtifactsDirectory)/manifests/kubernetes.yaml
                                  imagePullSecrets: |
                                      $(imagePullSecret)
                                  containers: |
                                      $(containerRegistry)/$(imageRepository):$(tag)
    
    # This stage is to conduct E2E test in a deployed environment-Uat env
    # This stage will be triggered on master branch and on Uat environment only
    - stage: E2E_Tests_UAT
      displayName: Run e2e tests on UAT
      #   condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
      dependsOn: Deploy_to_UAT
      jobs:
          - job: E2E_Tests
            displayName: E2E Tests on UAT environment
            pool:
                vmImage: $(vmImageName)
            steps:
                - checkout: self

                # This step is qu get the loadbalancer IP in uat environment for e2e test
                - task: Kubernetes@1
                  displayName: Get Service IP
                  inputs:
                      connectionType: "Azure Resource Manager"
                      azureSubscriptionEndpoint: $(azureSubscriptionEndpoint)
                      azureResourceGroup: $(resourcesGroupName)
                      kubernetesCluster: $(aksClusterName)
                      command: "get"
                      arguments: 'svc $(clusterServiceName) --namespace=$(uatNamespace) -o=jsonpath="{.status.loadBalancer.ingress[0].ip}"'
                  env:
                      SERVICE_IP: $(ServiceIp)

                # This step below is to replace the test ip with loadbalancer ip in protractor.conf.js file
                - script: |
                      echo "Setting API_URL for e2e tests..."
                      sed -i "s,http://localhost:4200/,http://$SERVICE_IP/,g" e2e/protractor.conf.js
                      cat e2e/protractor.conf.js
                  displayName: Set API URL for e2e tests

                - task: NodeTool@0
                  inputs:
                      versionSource: "spec"
                      versionSpec: "14.x"
                  displayName: "Insall Node.js"

                - task: Npm@1
                  displayName: Install dependencies
                  inputs:
                      command: "install"

                #  This step is to update the project chrome driver to 117.0.5938.132,
                #  So it can align with the chrome driver version in ubuntu server of the azure pipeline
                - script: |
                      node node_modules/.bin/webdriver-manager update --versions.chrome=117.0.5938
                      node node_modules/.bin/webdriver-manager status
                  displayName: "update project chrome version"

                - task: Npm@1
                  displayName: Run e2e tests
                  inputs:
                      command: "custom"
                      customCommand: "run e2e"
                  continueOnError: true
