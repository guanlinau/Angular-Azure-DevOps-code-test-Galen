# trigger:
# - master
# trigger: none
trigger:
    - dast_testing

resources:
    - repo: self

variables:
    CI: true
    vmImageName: "ubuntu-latest"
    # Azure Container Registry
    # Container registry service connection established during pipeline creation
    dockerRegistryServiceConnection: "453a3951-5cbc-4f12-9589-8ad8592ee4dd"
    imageRepository: "angularwebdevops"
    containerRegistry: "angularwebacr.azurecr.io"
    dockerfilePath: "$(Build.SourcesDirectory)/Dockerfile"
    tag: "$(Build.BuildId)"

    # Azure kubernetes service
    imageSecret: "image-key"
    uatNamespace: "angular-web-uat"
    proNamespace: "angular-web-pro"
    uatReplicasNumber: 1
    proReplicasNumber: 2
    uatEnvironment: "uat.angular-web-uat"
    proEnvironment: "pro.angular-web-pro"
    azureSubscriptionEndpoint: "e2e_azureSubscriptionEndpoint"
    resourcesGroupName: "angular-web-sg"
    aksClusterName: "angular-web-aks"
    clusterServiceName: "angular-web-service"

    # unit testing
    unittestResultsFiles: "src/test-results/Chrome_Headless_117.0.5938.*_(Linux_x86_64)/TESTS-*.xml"
    codeCoverageSummaryFileLocation: "coverage/angular11-testing-examples/cobertura-coverage.xml"
    codeCoverageReportDirectory: "coverage/angular11-testing-examples/"

    # SonarCloud
    sonarOrganization: "guanlinau"
    sonarCliProjectKey: "guanlinau_Angular-Azure-DevOps-code-test-Galen"
    sonarCliProjectName: "Angular-Azure-DevOps-code-test-Galen"
    sonarCliSources: "."

stages:
    # - stage: TestAndCodeAnalysis
    #   displayName: "Test&Code Analysis"
    #   jobs:
    #       - job: Compile_Test_Code_Analysis
    #         displayName: "Compile_Test_Code_Analysis"
    #         pool:
    #             vmImage: $(vmImageName)

    #         # Our angular project uses Node.js v14.21.3
    #         steps:
    #             - task: NodeTool@0
    #               inputs:
    #                   versionSource: "spec"
    #                   versionSpec: "14.x"
    #               displayName: "Install Node.js"
    #             - task: Npm@1
    #               inputs:
    #                   command: "install"
    #               displayName: "Install dependencies"

    #             #  Build and compile the Angular project
    #             - task: Npm@1
    #               inputs:
    #                   command: "custom"
    #                   customCommand: "run build"
    #               displayName: "Run build for compiling"

    #             # Run unit tests and test coverage
    #             - script: |
    #                   npx ng test --code-coverage --watch=false
    #               displayName: "Run unit tesing and access the code coverage"

    #             # Accessing the code coverage
    #             - task: PublishCodeCoverageResults@1
    #               displayName: "Access and Publish code coverage results"
    #               condition: succeededOrFailed()
    #               inputs:
    #                   codeCoverageTool: "Cobertura"
    #                   summaryFileLocation: $(codeCoverageSummaryFileLocation)
    #                   reportDirectory: $(codeCoverageReportDirectory)
    #                   failIfCoverageEmpty: false

    #             # Accessing the unit testing results report
    #             - task: PublishTestResults@2
    #               displayName: "Access and Publish unit test results"
    #               condition: succeededOrFailed()
    #               inputs:
    #                   searchFolder: $(System.DefaultWorkingDirectory)
    #                   testRunTitle: Angular
    #                   testResultsFormat: JUnit
    #                   testResultsFiles: $(unittestResultsFiles)

    #             # Linting and code analysis
    #             - task: Npm@1
    #               inputs:
    #                   command: "custom"
    #                   customCommand: "run lint"
    #               displayName: "Run Linting and code quality analysis"
    #       - job: Scan_Code_Vulnerabilities
    #         # dependsOn: Compile_Test_Code_Analysis
    #         displayName: "Scan_Code_Vulnerabilities_SonarCloud"
    #         pool:
    #             vmImage: $(vmImageName)

    #         # Using SonarCloud for static application security testing
    #         steps:
    #             - task: SonarCloudPrepare@1
    #               displayName: 'Prepare Analysis Configuration'
    #               inputs:
    #                 SonarCloud: 'sonarcloud'
    #                 organization: $(sonarOrganization)
    #                 scannerMode: 'CLI'
    #                 configMode: 'manual'
    #                 cliProjectKey: $(sonarCliProjectKey)
    #                 cliProjectName: $(sonarCliProjectName)
    #                 cliSources: $(sonarCliSources)
    #             - task: SonarCloudAnalyze@1
    #               displayName: 'Run Code Analysis'
    #               inputs:
    #                 jdkversion: 'JAVA_HOME'
    #             - task: SonarCloudPublish@1
    #               displayName: 'Publish Quality Gate Result'
    #               inputs:
    #                 pollingTimeoutSec: '300'

    # This stage is to Build Docker image, versioning artifacts and push images/artifacts into Azure Container Registry
    # This stage will be triggered on master branch only
    - stage: Build
      displayName: Build and push Docker image stage
      # condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
      jobs:
          - job: Build
            displayName: Build
            pool:
                vmImage: $(vmImageName)

            steps:
                - task: Docker@2
                  displayName: Build and push an image to container registry
                  inputs:
                      command: buildAndPush
                      repository: $(imageRepository)
                      dockerfile: $(dockerfilePath)
                      containerRegistry: $(dockerRegistryServiceConnection)
                      tags: |
                          $(tag)

                - task: PublishPipelineArtifact@1
                  displayName: Publish the manifests folder to pipeline
                  inputs:
                      targetPath: "$(Build.SourcesDirectory)/manifests"
                      artifact: "manifests"
                      publishLocation: "pipeline"

    #  This stage is to deploy angular web into Uat env for User Acceptance Testing also as a deployed env for e2e
    #  This stage will be triggered on master branch only

    # - stage: Deploy_to_UAT
    #   displayName: Deploy to UAT stage
    #   # condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
    #   dependsOn: Build
    #   variables:
    #       imagePullSecret: $(imageSecret)
    #       angular-web-env: $(uatNamespace)
    #       replica-number: $(uatReplicasNumber)
    #       acr-server: $(containerRegistry)
    #       acr-repo-name: $(imageRepository)
    #       image-version: $(tag)
    #   jobs:
    #       - deployment: Deploy_to_UAT
    #         displayName: Deploy to UAT envrionment
    #         pool:
    #             vmImage: $(vmImageName)
    #         environment: $(uatEnvironment)
    #         strategy:
    #             runOnce:
    #                 deploy:
    #                     steps:
    #                         - task: DownloadPipelineArtifact@2
    #                           inputs:
    #                               artifactName: "manifests"
    #                               downloadPath: "$(System.ArtifactsDirectory)/manifests"

    #                         - task: KubernetesManifest@0
    #                           displayName: Create imagePullSecret
    #                           inputs:
    #                               action: createSecret
    #                               secretName: $(imagePullSecret)
    #                               namespace: $(uatNamespace)
    #                               dockerRegistryEndpoint: $(dockerRegistryServiceConnection)

    #                         - task: replacetokens@5
    #                           inputs:
    #                               rootDirectory: "$(System.ArtifactsDirectory)/manifests"
    #                               targetFiles: "kubernetes.yaml"
    #                               encoding: "auto"
    #                               tokenPattern: "custom"
    #                               tokenPrefix: "$"
    #                               tokenSuffix: "$"
    #                               writeBOM: true
    #                               actionOnMissing: "warn"
    #                               keepToken: false
    #                               actionOnNoFiles: "continue"
    #                               enableTransforms: false
    #                               enableRecursion: false
    #                               useLegacyPattern: false
    #                               enableTelemetry: true

    #                         - task: KubernetesManifest@0
    #                           displayName: Deploy to Kubernetes cluster
    #                           inputs:
    #                               action: deploy
    #                               namespace: $(uatNamespace)
    #                               manifests: |
    #                                   $(System.ArtifactsDirectory)/manifests/kubernetes.yaml
    #                               imagePullSecrets: |
    #                                   $(imagePullSecret)
    #                               containers: |
    #                                   $(containerRegistry)/$(imageRepository):$(tag)


    # This stage is to conduct E2E test in a deployed environment-Uat env
    # This stage will be triggered on master branch and on Uat environment only

    # - stage: E2E_Tests_UAT
    #   displayName: Run e2e tests on UAT
    #   # condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
    #   dependsOn: Deploy_to_UAT
    #   jobs:
    #       - job: E2E_Tests
    #         displayName: E2E Tests on UAT environment
    #         pool:
    #             vmImage: $(vmImageName)
    #         steps:
    #             - checkout: self

    #             # This step is qu get the loadbalancer IP in uat environment for e2e test

    #             - task: AzureCLI@2
    #               inputs:
    #                   azureSubscription: $(azureSubscriptionEndpoint)
    #                   scriptType: "bash"
    #                   scriptLocation: "inlineScript"
    #                   inlineScript: |
    #                       az aks get-credentials --resource-group $(resourcesGroupName) --name $(aksClusterName)
    #               displayName: "Set up aks context"

    #             - script: |
    #                   SERVICE_IP=$(kubectl get svc $(clusterServiceName) --namespace=$(uatNamespace) -o=jsonpath="{.status.loadBalancer.ingress[0].ip}")

    #                   echo "Setting API_URL for e2e tests..."
    #                   sed -i "s,http://localhost:4200/,http://$SERVICE_IP/,g" e2e/protractor.conf.js
    #               displayName: "Get AKS Service IP and replace it in protractor.conf.js"

    #             - task: NodeTool@0
    #               inputs:
    #                   versionSource: "spec"
    #                   versionSpec: "14.x"
    #               displayName: "Insall Node.js"

    #             - task: Npm@1
    #               displayName: Install dependencies
    #               inputs:
    #                   command: "install"

    #             #  This step is to update the project chrome driver to 117.0.5938.132,
    #             #  So it can align with the chrome driver version in ubuntu server of the azure pipeline
    #             - script: |
    #                   # Ubuntu chrome version
    #                     google-chrome --version
    #                   node node_modules/.bin/webdriver-manager update --gecko false
    #                   node node_modules/.bin/webdriver-manager status
    #               displayName: "update project chrome version"

    #             - task: Npm@1
    #               displayName: Run e2e tests
    #               inputs:
    #                   command: "custom"
    #                   customCommand: "run e2e"
    #               continueOnError: true


    - stage: DAST
          displayName:Dynamic Application Security Testing
          # condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
      dependsOn: Build
      jobs:
          - job: DAST
            displayName: Dynamic Application Security Testing
            pool:
                vmImage: $(vmImageName)
            steps:
                - checkout: self

                - task: Docker@2
                  inputs:
                    containerRegistry: 'angularwebacr-1506'
                    # containerRegistry: $(containerRegistry)
                    command: 'login'
                - script: |
                      docker run -d -p 80:80 angular_dast $(containerRegistry)/$(imageRepository):$(tag)
                      docker ps -a
                  displayName: "Run a angular docker"
                
                - task: owaspzap@1
                  inputs:
                    threshold: '50'
                    port: '80'
                  displayName: 'Owasp DAST Scan'
                
                - script: |
                      sudo npm install -g handlebars-cmd
                      sudo cat <<EOF > owaspzap/nunit-template.hbs
                      {{#each site}}
                      <test-run
                          id="2"
                          name="Owasp test"
                          start-time="{{../[@generated]}}"  >
                          <test-suite
                              id="{{@index}}"
                              type="Assembly"
                              name="{{[@name]}}"
                              result="Failed"
                              failed="{{alerts.length}}">
                              <attachments>
                                  <attachment>
                                      <filePath>owaspzap/report.html</filePath>
                                  </attachment>
                              </attachments>
                          {{#each alerts}}<test-case
                              id="{{@index}}"
                              name="{{alert}}"
                              result="Failed"
                              fullname="{{alert}}"
                              time="1">
                                  <failure>
                                          <message>
                                          <![CDATA[{{{desc}}}]]>
                                      </message>
                                      <stack-trace>
                                          <![CDATA[
                      Solution:
                      {{{solution}}}
                      Reference:
                      {{{reference}}}
                      instances:{{#each instances}}
                      * {{uri}}
                          - {{method}}
                          {{#if evidence}}- {{{evidence}}}{{/if}}
                                          {{/each}}]]>
                                      </stack-trace>
                                  </failure>
                          </test-case>
                          {{/each}}
                          </test-suite>
                      </test-run>
                      {{/each}}
                      EOF
                  displayName: 'Owasp Nunit Template'
                  condition: always()
                
                - script: ' handlebars owaspzap/report.json < owaspzap/nunit-template.hbs > owaspzap/test-results.xml'
                  displayName: 'generate nunit type file'
                  condition: always()
                
                - task: PublishTestResults@2
                  displayName: 'Publish DAST Test Results'
                  inputs:
                    testResultsFormat: 'NUnit'
                    testResultsFiles: 'owaspzap/test-results.xml'
                    testRunTitle: 'DAST_Owasp'
                  condition: always()

                    


