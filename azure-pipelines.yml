# trigger:
# - master
trigger: none
# trigger:
#     - Augular-DevOps-YAML-pipleine-Galen

resources:
    - repo: self

variables:
    # Container registry service connection established during pipeline creation
    dockerRegistryServiceConnection: "5e1f01e6-4395-4c31-8174-dd4474fc2ca1"
    imageRepository: "angularrepo"
    containerRegistry: "angularwebacr.azurecr.io"
    dockerfilePath: "$(Build.SourcesDirectory)/Dockerfile"
    tag: "$(Build.BuildId)"
    imageSecret: "image-key"
    uatNamespace: "angular-web-uat"
    proNamespace: "angular-web-pro"
    uatReplicasNumber: 1
    proReplicasNumber: 2
    uatEnvironment: "uat.angular-web-uat"
    proEnvironment: "pro.angular-web-pro"
    vmImageName: "ubuntu-latest"
    azureSubscriptionEndpoint: "e2e_azureSubscriptionEndpoint"
    resourcesGroupName: "angular-web-sg"
    aksClusterName: "angular-web-aks"
    clusterServiceName: "angular-web-service"

stages:
    - stage: Build
      displayName: Build and push stage
      #   condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
      jobs:
          - job: Build
            displayName: Build
            pool:
                vmImage: $(vmImageName)

            steps:
                - task: Docker@2
                  displayName: Build and push an image to container registry
                  inputs:
                      command: buildAndPush
                      repository: $(imageRepository)
                      dockerfile: $(dockerfilePath)
                      containerRegistry: $(dockerRegistryServiceConnection)
                      tags: |
                          $(tag)

                - task: PublishPipelineArtifact@1
                  displayName: Publish the manifests folder to pipeline
                  inputs:
                      targetPath: "$(Build.SourcesDirectory)/manifests"
                      artifact: "manifests"
                      publishLocation: "pipeline"

    - stage: Deploy_to_UAT
      displayName: Deploy to UAT stage
      #   condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
      dependsOn: Build
      variables:
          imagePullSecret: $(imageSecret)
          angular-web-env: $(uatNamespace)
          replica-number: $(uatReplicasNumber)
          acr-server: $(containerRegistry)
          acr-repo-name: $(imageRepository)
          image-version: $(tag)
      jobs:
          - deployment: Deploy_to_UAT
            displayName: Deploy to UAT envrionment
            pool:
                vmImage: $(vmImageName)
            environment: $(uatEnvironment)
            strategy:
                runOnce:
                    deploy:
                        steps:
                            - task: DownloadPipelineArtifact@2
                              inputs:
                                  artifactName: "manifests"
                                  downloadPath: "$(System.ArtifactsDirectory)/manifests"

                            - task: KubernetesManifest@0
                              displayName: Create imagePullSecret
                              inputs:
                                  action: createSecret
                                  secretName: $(imagePullSecret)
                                  namespace: $(uatNamespace)
                                  dockerRegistryEndpoint: $(dockerRegistryServiceConnection)

                            - task: replacetokens@5
                              inputs:
                                  rootDirectory: "$(System.ArtifactsDirectory)/manifests"
                                  targetFiles: "kubernetes.yaml"
                                  encoding: "auto"
                                  tokenPattern: "custom"
                                  tokenPrefix: "$"
                                  tokenSuffix: "$"
                                  writeBOM: true
                                  actionOnMissing: "warn"
                                  keepToken: false
                                  actionOnNoFiles: "continue"
                                  enableTransforms: false
                                  enableRecursion: false
                                  useLegacyPattern: false
                                  enableTelemetry: true

                            - task: KubernetesManifest@0
                              displayName: Deploy to Kubernetes cluster
                              inputs:
                                  action: deploy
                                  namespace: $(uatNamespace)
                                  manifests: |
                                      $(System.ArtifactsDirectory)/manifests/kubernetes.yaml
                                  imagePullSecrets: |
                                      $(imagePullSecret)
                                  containers: |
                                      $(containerRegistry)/$(imageRepository):$(tag)

    - stage: E2E_Tests_UAT
      displayName: Run e2e tests on UAT
      #   condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
      dependsOn: Deploy_to_UAT
      jobs:
          - job: E2E_Tests
            displayName: E2E Tests on UAT environment
            pool:
                vmImage: $(vmImageName)
            steps:
                - checkout: self
                - task: Kubernetes@1
                  displayName: Get Service IP
                  inputs:
                      connectionType: "Azure Resource Manager"
                      azureSubscriptionEndpoint: $(azureSubscriptionEndpoint)
                      azureResourceGroup: $(resourcesGroupName)
                      kubernetesCluster: $(aksClusterName)
                      command: "get"
                      arguments: 'svc $(clusterServiceName) --namespace=$(uatNamespace) -o=jsonpath="{.status.loadBalancer.ingress[0].ip}"'
                  env:
                      SERVICE_IP: $(ServiceIp)
                - script: |
                      echo "Setting API_URL for e2e tests..."
                      sed -i "s,http://localhost:4200/,http://$SERVICE_IP/,g" e2e/protractor.conf.js
                  displayName: Set API URL for e2e tests

                - task: NodeTool@0
                  inputs:
                      versionSource: "spec"
                      versionSpec: "14.x"
                  displayName: "Insall Node.js"

                - task: Npm@1
                  displayName: Install dependencies
                  inputs:
                      command: "install"

                - script: |
                      node node_modules/.bin/webdriver-manager update --versions.chrome=117.0.5938.132
                  displayName: "update chrome version"

                - task: Npm@1
                  displayName: Run e2e tests
                  inputs:
                      command: "custom"
                      customCommand: "run e2e"
